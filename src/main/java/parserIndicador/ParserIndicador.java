/* Generated By:JavaCC: Do not edit this line. ParserIndicador.java */
package parserIndicador;

import java.io.StringReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import formulaIndicador.*;

public class ParserIndicador implements ParserIndicadorConstants {

	List<Variable> listaDeVariables = new ArrayList<Variable>();
	FormulaIndicador formula;

	public ParserIndicador(String indicador) {
		this((Reader) (new StringReader(indicador + ";")));
	}

	final public void pasear() throws ParseException {
		try {
			formula = expr();
			jj_consume_token(FINALIZACION);
			System.out.println("Parseo Exitoso!\u005cn");
		} catch (ParseException e) {
			{
				if (true)
					throw new ParseException(
							"Lo lamento. Hay problemas en la sintaxis :/!\u005cn");
			}
		}
	}

	final public FormulaIndicador expr() throws ParseException {
		FormulaIndicador expresion1;
		FormulaIndicador expresion2;
		expresion1 = term();
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SUMA:
			case RESTA:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SUMA:
				jj_consume_token(SUMA);
				expresion2 = term();
				expresion1 = new Expresion(expresion1, expresion2, new Suma());
				break;
			case RESTA:
				jj_consume_token(RESTA);
				expresion2 = term();
				expresion1 = new Expresion(expresion1, expresion2, new Resta());
				break;
			default:
				jj_la1[1] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return new Expresion(expresion1, new Constante("0"), new Suma());
		}
		throw new Error("Missing return statement in function");
	}

	final public FormulaIndicador term() throws ParseException {
		FormulaIndicador termino1;
		FormulaIndicador termino2;
		termino1 = fact();
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MULTIPLICACION:
			case DIVISION:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MULTIPLICACION:
				jj_consume_token(MULTIPLICACION);
				termino2 = fact();
				termino1 = new Expresion(termino1, termino2,
						new Multiplicacion());
				break;
			case DIVISION:
				jj_consume_token(DIVISION);
				termino2 = fact();
				termino1 = new Expresion(termino1, termino2, new Division());
				break;
			default:
				jj_la1[3] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return new Expresion(termino1, new Constante("1"),
						new Multiplicacion());
		}
		throw new Error("Missing return statement in function");
	}

	final public FormulaIndicador fact() throws ParseException {
		FormulaIndicador fact1;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NUMERO:
			jj_consume_token(NUMERO);
			{
				if (true)
					return new Constante(token.image);
			}
			break;
		case PALABRA:
			jj_consume_token(PALABRA);
			Variable nuevaVariable = new Variable(token.image);
			listaDeVariables.add(nuevaVariable);
			{
				if (true)
					return nuevaVariable;
			}
			break;
		case PARENTIZQ:
			jj_consume_token(PARENTIZQ);
			fact1 = expr();
			jj_consume_token(PARENTDER);
			{
				if (true)
					return fact1;
			}
			break;
		default:
			jj_la1[4] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public List<Variable> variables() throws ParseException {
		{
			if (true)
				return listaDeVariables;
		}
		throw new Error("Missing return statement in function");
	}

	final public String pasearSoloNombre() throws ParseException {
		String cadena;
		try {
			cadena = palabra();
			jj_consume_token(FINALIZACION);
			System.out.println("Parseo Exitoso!\u005cn");
			{
				if (true)
					return cadena;
			}
		} catch (ParseException e) {
			{
				if (true)
					throw new ParseException(
							"Lo lamento. Hay problemas en la sintaxis :/!\u005cn");
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String palabra() throws ParseException {
		jj_consume_token(PALABRA);
		{
			if (true)
				return token.image;
		}
		throw new Error("Missing return statement in function");
	}

	final public FormulaIndicador getFormulaIndicador() throws ParseException {
		{
			if (true)
				return formula;
		}
		throw new Error("Missing return statement in function");
	}

	/** Generated Token Manager. */
	public ParserIndicadorTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[5];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x60, 0x60, 0x180, 0x180, 0x3200, };
	}

	/** Constructor with InputStream. */
	public ParserIndicador(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public ParserIndicador(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserIndicadorTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public ParserIndicador(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ParserIndicadorTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public ParserIndicador(ParserIndicadorTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(ParserIndicadorTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 5; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[14];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 5; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 14; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

}
